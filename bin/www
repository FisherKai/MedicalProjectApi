#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');

var port = normalizePort(process.env.PORT || '4000');
// app.set('port', port);
var server = http.createServer(app.callback());
// 引用socket
const io = require('socket.io')(server, { cors: true });

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

io.on('connection', socket => {
  var requestUrl = socket.request.url;
  var obj = parseUrl(requestUrl);
  var roomid = obj.id; // 获取参数
  //用户加入分组
  socket.join(roomid);
  socket.on('sendMsg', function (data) {  //接收一个事件
    /**
     * 收到消息，然后做处理去查询应该返回什么结果
     */
    // todo 调用其他接口
    let i  = 0;
    socket.emit('receiveMsg', { from: 'server', to: 'client', data: data.data });
    setInterval(function () {
      socket.emit('receiveMsg', { from: 'server', to: 'client', data: i++ });
    },1000)
    //对分组内的用户发送消息
    // socket.broadcast.to(roomid).emit('receiveMsg', 'hello world');//包括自己
    //  socket.broadcast.to(roomid).emit('addcart', 'addcart');//不包括自己
  });
})

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(`app run at : ${addr.port}`);
}

/**
 * 处理URL上的参数
 * @param url 
 */
function parseUrl(url) {
  let [, ...params] = url.split('?');
  let paramArr = params[0].split('&');
  let obj = [];
  paramArr.length > 0 && paramArr.forEach(function (item) {
    let [name, value] = item.split('=');
    obj[name] = value;
  })
  return obj;
}